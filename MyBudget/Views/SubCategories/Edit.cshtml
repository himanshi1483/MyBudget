@model MyBudget.Models.SubCategories

@{
    ViewBag.Title = "Edit";
}

<div class="row">
    <div class="col-md-6">
        <!-- BEGIN SAMPLE FORM PORTLET-->
        <div class="portlet light ">
            <div class="portlet-title">
                <div class="caption font-red-sunglo">
                    <i class="icon-settings font-red-sunglo"></i>
                    <span class="caption-subject bold uppercase"> Edit</span>
                </div>
                <div class="portlet-body form">
                    @using (Html.BeginForm())
                    {
                        @Html.HiddenFor(x => x.SubCategoryId)
                        @Html.AntiForgeryToken()

                    <div class="form-body">
                        <div class="form-group form-md-line-input  has-success">
                            <label class="control-label col-md-3" for="Name">Name</label>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group form-md-line-input has-success">
                            <label class="control-label col-md-3" for="Frequency">Frequency</label>
                            @Html.EnumDropDownListFor(x => x.Frequency, "Frequency", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Frequency, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group form-md-line-input has-success">
                            <label class="control-label col-md-3" for="ExpectedAmount">Expected Amount</label>
                            @Html.EditorFor(model => model.ExpectedAmount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ExpectedAmount, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group  form-md-line-input has-success">
                            <label class="control-label col-md-3" for="ExpectedInterest">Expected Interest</label>
                            @Html.EditorFor(model => model.ExpectedInterest, new { htmlAttributes = new { @class = "form-control" } }) %
                            @Html.ValidationMessageFor(model => model.ExpectedInterest, "", new { @class = "text-danger" })
                        
                        </div>
                        <div class="form-group form-md-line-input has-success">
                            <label class="control-label col-md-3" for="StartDate">Start Date</label>
                            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control  form-control-inline default-date-picker", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group  form-md-line-input has-success">
                            <label class="control-label col-md-3" for="EndDate">End Date</label>
                            @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control form-control-inline  default-date-picker", @type = "date" } })
                            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                        </div>


                        <div class="form-group  form-md-line-input has-success">
                            <label class="control-label col-md-3" for="ParentCategoryId">Parent Category</label>
                            @Html.DropDownList("ParentCategoryId", new SelectList(ViewBag.Categories, "CategoryId", "CategoryName"), new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ParentCategoryId, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group  form-md-line-input has-success">
                            <label class="control-label col-md-3" for="DepositType">Deposit Type</label>
                            @*@Html.DropDownList("DepositType", new SelectList(ViewBag.Categories, "CategoryId", "CategoryName"))*@
                            @Html.EnumDropDownListFor(model => model.DepositType, "DepositType", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.DepositType, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3" for="Owner">Owner</label>
                            @Html.EditorFor(model => model.Owner, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Owner, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-3" for="IsDefault">Is Default</label>
                            <div class="checkbox">
                                @Html.EditorFor(model => model.IsDefault)
                                @Html.ValidationMessageFor(model => model.IsDefault, "", new { @class = "text-danger" })
                            </div>

                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                    }

                    <div>
                        @Html.ActionLink("Back to List", "Index")
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
   
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
